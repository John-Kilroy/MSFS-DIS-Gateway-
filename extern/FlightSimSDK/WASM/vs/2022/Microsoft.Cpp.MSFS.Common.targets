<!--
***********************************************************************************************
Microsoft.Cpp.MSFS.Common.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

Copyright (C) Microsoft Corporation. All rights reserved.
***********************************************************************************************
-->

<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(VCTargetsPath)\Microsoft.CppCommon.targets"/>
  
  <!-- Tools that show up in the IDE property pages for WASM module projects -->
  <ItemGroup Condition="'$(UseDefaultProjectTools)' != 'false' and '$(ConfigurationType)' == 'Application'">
    <ProjectTools Include="Link"/>
    <ProjectTools Include="CustomBuildStep"/>
  </ItemGroup>

  <!-- Tools that show up in the IDE property pages for WASM static library project-->
  <ItemGroup Condition="'$(UseDefaultProjectTools)' != 'false' and '$(ConfigurationType)' == 'StaticLibrary'">
    <ProjectTools Include="Lib"/>
    <ProjectTools Include="CustomBuildStep"/>
  </ItemGroup>


  <!-- *******************************************************************************************
        WASM Archive
       ******************************************************************************************* -->

  <Target Name="WasmArchive"
          Condition="'@(Lib)' != ''">
    <ItemGroup>
      <Lib>
        <MinimalRebuildFromTracking Condition="'$(_BuildActionType)' != 'Build' or '$(ForceRebuild)' == 'true'">false</MinimalRebuildFromTracking>
        <ExcludedInputPaths>$(ExcludePath)</ExcludedInputPaths>
      </Lib>
    </ItemGroup>

    <PropertyGroup>
      <LibToolArchitecture Condition="'$(LibToolArchitecture)' == ''">$(VCToolArchitecture)</LibToolArchitecture>
    </PropertyGroup>

    <LIB
      Sources                         ="@(Lib)"
      BuildingInIDE                   ="$(BuildingInsideVisualStudio)"

      AdditionalDependencies          ="%(Lib.AdditionalDependencies)"
      AdditionalLibraryDirectories    ="%(Lib.AdditionalLibraryDirectories)"
      AdditionalOptions               ="$(LibAdditionalOptions)"
      DisplayLibrary                  ="%(Lib.DisplayLibrary)"
      ErrorReporting                  ="%(Lib.LinkErrorReporting)"
      ExportNamedFunctions            ="%(Lib.ExportNamedFunctions)"
      ForceSymbolReferences           ="%(Lib.ForceSymbolReferences)"
      IgnoreAllDefaultLibraries       ="%(Lib.IgnoreAllDefaultLibraries)"
      IgnoreSpecificDefaultLibraries  ="%(Lib.IgnoreSpecificDefaultLibraries)"
      LinkTimeCodeGeneration          ="%(Lib.LinkTimeCodeGeneration)"
      ModuleDefinitionFile            ="%(Lib.ModuleDefinitionFile)"
      Name                            ="%(Lib.Name)"
      OutputFile                      ="%(Lib.OutputFile)"
      RemoveObjects                   ="%(Lib.RemoveObjects)"
      SubSystem                       ="%(Lib.SubSystem)"
      SuppressStartupBanner           ="%(Lib.SuppressStartupBanner)"
      TargetMachine                   ="%(Lib.TargetMachine)"
      TreatLibWarningAsErrors         ="%(Lib.TreatLibWarningAsErrors)"
      Verbose                         ="%(Lib.Verbose)"

      TrackerLogDirectory             ="%(Lib.TrackerLogDirectory)"
      ExcludedInputPaths              ="%(Lib.ExcludedInputPaths)"
      TLogReadFiles                   ="@(LIBTLogReadFiles)"
      TLogWriteFiles                  ="@(LIBTLogWriteFiles)"
      ToolExe                         ="$(LIBToolExe)"
      ToolPath                        ="$(LIBToolPath)"
      TrackFileAccess                 ="$(TrackFileAccess)"
      MinimalRebuildFromTracking      ="%(Lib.MinimalRebuildFromTracking)"
      ToolArchitecture                ="$(LibToolArchitecture)"
      TrackerFrameworkPath            ="$(LibTrackerFrameworkPath)"
      TrackerSdkPath                  ="$(LibTrackerSdkPath)"
      TrackedInputFilesToIgnore       ="@(LibNoDependencies)"
      TrackedOutputFilesToIgnore      ="@(LibTrackedOutputFilesToIgnore)"
      AcceptableNonZeroExitCodes      ="%(Lib.AcceptableNonZeroExitCodes)"
      >
    </LIB>

    <Message Text="$(MSBuildProjectFile) -&gt; $(TargetPath)" Importance="High" />
  </Target>

  
  <UsingTask TaskName="MSFSLinkTask" AssemblyFile="$(ToolsetRoot)WASM\vs\2022\MSFSBuildTasks.dll"/>
  <UsingTask TaskName="MSFSLibTask" AssemblyFile="$(ToolsetRoot)WASM\vs\2022\MSFSBuildTasks.dll"/>

  <PropertyGroup>
    <_ExecutablePathWasCustomized>false</_ExecutablePathWasCustomized>
    <_ExecutablePathWasCustomized Condition="'$(LLVMInstallDir)'!='$(_DefaultLLVMInstallDir)'">true</_ExecutablePathWasCustomized>
	<WASMTarget>wasm32-unknown-wasi</WASMTarget>
	<WASMTarget Condition="'$(PreferredToolArchitecture)' == 'x64'">wasm64-unknown-wasi</WASMTarget>
  </PropertyGroup>

  <ItemGroup>
    <PropertyPageSchema Include="$(ToolsetRoot)WASM\vs\2022\general.xml" />
    <PropertyPageSchema Include="$(ToolsetRoot)WASM\vs\2022\cl_msfs_extension.xml" />
    <PropertyPageSchema Include="$(ToolsetRoot)WASM\vs\2022\link_msfs.xml" />
  </ItemGroup>
  
  <PropertyGroup>
	<IsEaCPatch>false</IsEaCPatch>
	<EacPreprocessorMacros>false</EacPreprocessorMacros>
	<EacPatchNumber>0</EacPatchNumber>
	<EaCPatchBase></EaCPatchBase>
	<EaCPatchOutDir></EaCPatchOutDir>
	<EaCExpandFactor>10</EaCExpandFactor>
	<EaCDataSectionSize>268435456</EaCDataSectionSize>
	<EaCReservedImportsMargin>256</EaCReservedImportsMargin>
  </PropertyGroup>

  <!-- ClangClAdditionalOptions for compat with LLVM extension -->
  <ItemDefinitionGroup>
    <ClCompile>
      <AdditionalOptions>/clang:-fstack-size-section /clang:-mbulk-memory --target=$(WASMTarget) /showFilenames /clang:--sysroot="$(ToolsetRoot)WASM\wasi-sysroot" /clang:-fvisibility=hidden /clang:-ffunction-sections /clang:-fdata-sections /clang:-fno-stack-protector /clang:-fno-exceptions /clang:-fms-extensions /clang:-fwritable-strings -Werror=return-type -Wno-unused-command-line-argument $(LlvmArchitectureSwitch) $(ClangClAdditionalOptions) %(AdditionalOptions)</AdditionalOptions>
	  <AdditionalOptions Condition="'%(ClCompile.DebugInformationFormat)' == 'ProgramDatabase'">/clang:-g /clang:-fstandalone-debug /clang:-mllvm /clang:-wasm-disable-redzone %(AdditionalOptions)</AdditionalOptions>
      <AdditionalOptions Condition="'$(EacPreprocessorMacros)' == true">/DRECOMPILATION=$(EacPatchNumber) %(AdditionalOptions)</AdditionalOptions>
	</ClCompile>
  </ItemDefinitionGroup>
  <!-- LldLinkAdditionalOptions for compat with LLVM extension -->
    <ItemDefinitionGroup>
    <Link>
      <AdditionalOptions>--stack-guard-page --allow-undefined --export-dynamic --export malloc --export free --export __wasm_call_ctors --export-table --export mallinfo --export mchunkit_begin --export mchunkit_next --export get_pages_state --export mark_decommit_pages -L "$(ToolsetRoot)WASM\wasi-sysroot\lib\wasm32-wasi" -lc++ -lc++abi -lc "$(ToolsetRoot)WASM\wasi-sysroot\lib\wasm32-wasi\libclang_rt.builtins-wasm32.a"  -lc "$(ToolsetRoot)WASM\WasmVersions\MSFS_WasmVersions.a" --export GetSimConnectVersion %(AdditionalOptions)</AdditionalOptions>
	  <AdditionalOptions Condition="'%(Link.GenerateDebugInformation)' == 'false'">--strip-debug %(AdditionalOptions)</AdditionalOptions>
	  <AdditionalOptions Condition="'$(IsEaCPatch)' == false">--gc-sections -O3 --lto-O3 %(AdditionalOptions)</AdditionalOptions>
   </Link>
  </ItemDefinitionGroup>
  <!-- Flags to support Edit&Continue features if we're compiling in debug mode -->
  <ItemDefinitionGroup>
    <Link>
      <AdditionalOptions Condition="'%(Link.GenerateDebugInformation)' != 'false'">--merge-rodata-bss --reserved-imports-margin=$(EaCReservedImportsMargin) --data-expand-factor=$(EaCExpandFactor) --data-size=$(EaCDataSectionSize) --no-demangle --no-merge-data-segments -O0 %(AdditionalOptions)</AdditionalOptions>
	  <!-- Prevent PostBuild actions from taking place on recompilation builds (to prevent the EaC patch wasm file from being copied to the package folders, for example) -->
	  <AdditionalOptions Condition="'%(Link.GenerateDebugInformation)' != 'false' and '$(IsEaCPatch)' == false">--eac-recompile-cmd="\"$(MSBuildToolsPath)\MSBuild.exe\" /nologo /v:n /p:Configuration=\"$(Configuration)\" /p:Platform=\"$(Platform)\" /p:IsEaCPatch=true /p:EaCPatchBase=\"$(TargetPath)\" /p:SolutionDir=\"$(SolutionDir.TrimEnd('\'))\\\\\" /p:SolutionName=\"$(SolutionName)\" /p:SolutionFileName=\"$(SolutionFileName)\" /p:SolutionPath=\"$(SolutionPath)\" \"$(ProjectPath)\"" %(AdditionalOptions)</AdditionalOptions>
	  <AdditionalOptions Condition="'%(Link.GenerateDebugInformation)' != 'false' and '$(IsEaCPatch)' == true">--eac-patch %(AdditionalOptions)</AdditionalOptions>
	  <AdditionalOptions Condition="'%(Link.GenerateDebugInformation)' != 'false' and '$(IsEaCPatch)' == true">--eac-file "$(EaCPatchBase)" %(AdditionalOptions)</AdditionalOptions>
    </Link>
  </ItemDefinitionGroup>

  <Target Name="ClCompile"
          Condition="'@(ClCompile)' != ''"
          DependsOnTargets="SelectClCompile">

	<Message Text="PackageOutputDir is: $(IsEaCPatch) $(EaCPatchBase) $(TargetPath) '$(EaCPatchOutDir)'" />
	<Message Text="Intermediate dir is $([System.IO.Path]::GetFullPath('$(IntDir)'))" />
	<Message Text="Filename: $(TLogLocation)"/>
	
    <VCMessage Code="MSB8053" Type="Error" Condition="('%(ClCompile.CompileAsManaged)' != 'false') AND ('%(ClCompile.CompileAsManaged)' != '')" />
    <VCMessage Code="MSB8054" Type="Error" Condition="('%(ClCompile.CompileAsWinRT)' == 'true') OR ('%(ClCompile.WinRTNoStdLib)' == 'true')" />
    <VCMessage Code="MSB8055" Type="Error" Condition="('%(ClCompile.OpenMPSupport)' == 'true')"  />
    <VCMessage Code="MSB8056" Type="Error" Condition="'%(ClCompile.EnableModules)' == 'true'" />

    <!-- Settings needed for clang-cl  -->
    <ItemGroup>
      <ClCompile>
        <DebugInformationFormat></DebugInformationFormat>
        <SupportJustMyCode>false</SupportJustMyCode>
      </ClCompile>
    </ItemGroup>

    <PropertyGroup>
      <CLToolArchitecture Condition="'$(CLToolArchitecture)' == ''">$(VCToolArchitecture)</CLToolArchitecture>
      <CLDeleteOutputOnExecute Condition="'$(CLDeleteOutputOnExecute)' == ''">true</CLDeleteOutputOnExecute>
    </PropertyGroup>

    <ItemGroup>
      <ClNoDependencies Condition="'@(ClNoDependencies)' == '' and '%(ClInclude.NoDependency)' == 'true'" Include="@(ClInclude)"/>
      <ClNoDependencies Condition="'$(NoDependencies)' != ''" Include="$(NoDependencies)" />
    </ItemGroup>

    <ItemGroup>
	  <ClCompile>
	    <!-- Moved to this target to avoid adding add $(IncludePath) for intellisense -->
	    <AdditionalIncludeDirectories>%(ClCompile.AdditionalIncludeDirectories);$(IncludePath)</AdditionalIncludeDirectories>
	    <ExcludedInputPaths>$(ExcludePath)</ExcludedInputPaths>
      </ClCompile>
    </ItemGroup>

    <!-- copy MultiProcessorCompilation to _MultiProcessorCompilation. MultiProcessorCompilation
      is cleared to avoid passing /MP to clang-cl which generates a warning -->
    <ItemGroup>
      <ClCompile Condition="'%(ClCompile.MultiProcessorCompilation)' == 'true'">
        <_MultiProcessorCompilation>true</_MultiProcessorCompilation>
      </ClCompile>
    </ItemGroup>

    <ItemGroup>
      <!-- remove settings which don't apply to clang-cl -->
      <ClCompile>
        <BrowseInformation />
        <BrowseInformationFile />
        <CompileAsManaged />
        <CompileAsWinRT />
        <DisableLanguageExtensions />
        <DisableSpecificWarnings />
        <EnableFiberSafeOptimizations />
        <EnableModules />
        <MultiProcessorCompilation />
        <EnableParallelCodeGeneration />
        <EnablePREfast />
        <EnforceTypeConversionRules />
        <ErrorReporting />
        <ExpandAttributedSource />
        <ExternalWarningLevel />
        <ForceConformanceInForLoopScope />
        <ForcedUsingFiles />
        <GenerateXMLDocumentationFiles />
        <IgnoreStandardIncludePath />
        <MinimalRebuild />
        <OpenMPSupport />
        <PREfastAdditionalOptions />
        <PREfastAdditionalPlugins />
        <PREfastLog />
        <ProgramDataBaseFileName />
        <RemoveUnreferencedCodeData />
        <SDLCheck />
        <StringPooling />
        <TreatSpecificWarningsAsErrors />
        <TreatWChar_tAsBuiltInType />
        <UseFullPaths />
        <WholeProgramOptimization />
      </ClCompile>
    </ItemGroup>

    <PropertyGroup>
      <ClMutliToolTaskMinimalRebuild>true</ClMutliToolTaskMinimalRebuild>
      <ClMutliToolTaskMinimalRebuild Condition="'$(_BuildActionType)' != 'Build' or '$(ForceRebuild)' == 'true'">false</ClMutliToolTaskMinimalRebuild>
      <ProcessorNumber Condition="'$(ProcessorNumber)' == ''">$(CL_MPCount)</ProcessorNumber>
    </PropertyGroup>

    <!-- Precompiled headers - need to build them first -->
    <CL Condition="'%(ClCompile.PrecompiledHeader)' == 'Create' and '%(ClCompile.ExcludedFromBuild)'!='true' and '%(ClCompile.CompilerIteration)' == ''"
        BuildingInIDE                      ="$(BuildingInsideVisualStudio)"
        Sources                            ="@(ClCompile)"

        AdditionalIncludeDirectories       ="%(ClCompile.AdditionalIncludeDirectories)"
        AdditionalOptions                  ="%(ClCompile.AdditionalOptions)"
        AdditionalUsingDirectories         ="%(ClCompile.AdditionalUsingDirectories)"
        AssemblerListingLocation           ="%(ClCompile.AssemblerListingLocation)"
        AssemblerOutput                    ="%(ClCompile.AssemblerOutput)"
        BrowseInformation                  ="%(ClCompile.BrowseInformation)"
        BrowseInformationFile              ="%(ClCompile.BrowseInformationFile)"
        BufferSecurityCheck                ="%(ClCompile.BufferSecurityCheck)"
        CallingConvention                  ="%(ClCompile.CallingConvention)"
        ControlFlowGuard                   ="%(ClCompile.ControlFlowGuard)"
        CompileAsManaged                   ="%(ClCompile.CompileAsManaged)"
        CompileAsWinRT                     ="%(ClCompile.CompileAsWinRT)"
        CompileAs                          ="%(ClCompile.CompileAs)"
        ConformanceMode                    ="%(ClCompile.ConformanceMode)"
        DebugInformationFormat             ="%(ClCompile.DebugInformationFormat)"
        DiagnosticsFormat                  ="%(ClCompile.DiagnosticsFormat)"
        DisableLanguageExtensions          ="%(ClCompile.DisableLanguageExtensions)"
        DisableSpecificWarnings            ="%(ClCompile.DisableSpecificWarnings)"
        EnableEnhancedInstructionSet       ="%(ClCompile.EnableEnhancedInstructionSet)"
        EnableFiberSafeOptimizations       ="%(ClCompile.EnableFiberSafeOptimizations)"
        EnableModules                      ="%(ClCompile.EnableModules)"
        EnableParallelCodeGeneration       ="%(ClCompile.EnableParallelCodeGeneration)"
        EnablePREfast                      ="%(ClCompile.EnablePREfast)"
        EnforceTypeConversionRules         ="%(ClCompile.EnforceTypeConversionRules)"
        ErrorReporting                     ="%(ClCompile.ErrorReporting)"
        ExceptionHandling                  ="%(ClCompile.ExceptionHandling)"
        ExpandAttributedSource             ="%(ClCompile.ExpandAttributedSource)"
        FavorSizeOrSpeed                   ="%(ClCompile.FavorSizeOrSpeed)"
        FloatingPointExceptions            ="%(ClCompile.FloatingPointExceptions)"
        FloatingPointModel                 ="%(ClCompile.FloatingPointModel)"
        ForceConformanceInForLoopScope     ="%(ClCompile.ForceConformanceInForLoopScope)"
        ForcedIncludeFiles                 ="%(ClCompile.ForcedIncludeFiles)"
        ForcedUsingFiles                   ="%(ClCompile.ForcedUsingFiles)"
        FunctionLevelLinking               ="%(ClCompile.FunctionLevelLinking)"
        GenerateXMLDocumentationFiles      ="%(ClCompile.GenerateXMLDocumentationFiles)"
        IgnoreStandardIncludePath          ="%(ClCompile.IgnoreStandardIncludePath)"
        InlineFunctionExpansion            ="%(ClCompile.InlineFunctionExpansion)"
        IntrinsicFunctions                 ="%(ClCompile.IntrinsicFunctions)"
        LanguageStandard                   ="%(ClCompile.LanguageStandard)"
        MinimalRebuild                     ="%(ClCompile.MinimalRebuild)"
        MultiProcessorCompilation          ="%(ClCompile.MultiProcessorCompilation)"
        ObjectFileName                     ="%(ClCompile.ObjectFileName)"
        OmitDefaultLibName                 ="%(ClCompile.OmitDefaultLibName)"
        OmitFramePointers                  ="%(ClCompile.OmitFramePointers)"
        OpenMPSupport                      ="%(ClCompile.OpenMPSupport)"
        Optimization                       ="%(ClCompile.Optimization)"
        PrecompiledHeader                  ="%(ClCompile.PrecompiledHeader)"
        PrecompiledHeaderFile              ="%(ClCompile.PrecompiledHeaderFile)"
        PrecompiledHeaderOutputFile        ="%(ClCompile.PrecompiledHeaderOutputFile)"
        PREfastAdditionalOptions           ="%(ClCompile.PREfastAdditionalOptions)"
        PREfastAdditionalPlugins           ="%(ClCompile.PREfastAdditionalPlugins)"
        PREfastLog                         ="%(ClCompile.PREfastLog)"
        PreprocessKeepComments             ="%(ClCompile.PreprocessKeepComments)"
        PreprocessorDefinitions            ="%(ClCompile.PreprocessorDefinitions)"
        PreprocessSuppressLineNumbers      ="%(ClCompile.PreprocessSuppressLineNumbers)"
        PreprocessToFile                   ="%(ClCompile.PreprocessToFile)"
        ProcessorNumber                    ="%(ClCompile.ProcessorNumber)"
        ProgramDataBaseFileName            ="%(ClCompile.ProgramDataBaseFileName)"
        RemoveUnreferencedCodeData         ="%(ClCompile.RemoveUnreferencedCodeData)"
        RuntimeLibrary                     ="%(ClCompile.RuntimeLibrary)"
        RuntimeTypeInfo                    ="%(ClCompile.RuntimeTypeInfo)"
        SDLCheck                           ="%(ClCompile.SDLCheck)"
        ShowIncludes                       ="%(ClCompile.ShowIncludes)"
        WarningVersion                     ="%(ClCompile.WarningVersion)"
        SmallerTypeCheck                   ="%(ClCompile.SmallerTypeCheck)"
        SpectreMitigation                  ="%(ClCompile.SpectreMitigation)"
        StringPooling                      ="%(ClCompile.StringPooling)"
        StructMemberAlignment              ="%(ClCompile.StructMemberAlignment)"
        SupportJustMyCode                  ="%(ClCompile.SupportJustMyCode)"
        SuppressStartupBanner              ="%(ClCompile.SuppressStartupBanner)"
        TreatSpecificWarningsAsErrors      ="%(ClCompile.TreatSpecificWarningsAsErrors)"
        TreatWarningAsError                ="%(ClCompile.TreatWarningAsError)"
        TreatWChar_tAsBuiltInType          ="%(ClCompile.TreatWChar_tAsBuiltInType)"
        UndefineAllPreprocessorDefinitions ="%(ClCompile.UndefineAllPreprocessorDefinitions)"
        UndefinePreprocessorDefinitions    ="%(ClCompile.UndefinePreprocessorDefinitions)"
        UseFullPaths                       ="%(ClCompile.UseFullPaths)"
        UseUnicodeForAssemblerListing      ="%(ClCompile.UseUnicodeForAssemblerListing)"
        WarningLevel                       ="%(ClCompile.WarningLevel)"
        WholeProgramOptimization           ="%(ClCompile.WholeProgramOptimization)"
        WinRTNoStdLib                      ="%(ClCompile.WinRTNoStdLib)"
        XMLDocumentationFileName           ="%(ClCompile.XMLDocumentationFileName)"
        CreateHotpatchableImage            ="%(CLCompile.CreateHotpatchableImage)"

        TrackerLogDirectory                ="%(ClCompile.TrackerLogDirectory)"
        ExcludedInputPaths                 ="%(ClCompile.ExcludedInputPaths)"
        TLogReadFiles                      ="@(CLTLogReadFiles)"
        TLogWriteFiles                     ="@(CLTLogWriteFiles)"
        ToolExe                            ="$(CLToolExe)"
        ToolPath                           ="$(CLToolPath)"
        TrackFileAccess                    ="$(TrackFileAccess)"
        MinimalRebuildFromTracking         ="%(ClCompile.MinimalRebuildFromTracking)"
        ToolArchitecture                   ="$(CLToolArchitecture)"
        TrackerFrameworkPath               ="$(CLTrackerFrameworkPath)"
        TrackerSdkPath                     ="$(CLTrackerSdkPath)"
        TrackedInputFilesToIgnore          ="@(ClNoDependencies)"
        TrackedOutputFilesToIgnore         ="@(ClTrackedOutputFilesToIgnore)"
        DeleteOutputOnExecute              ="$(CLDeleteOutputOnExecute)"

        AcceptableNonZeroExitCodes         ="%(ClCompile.AcceptableNonZeroExitCodes)"
        YieldDuringToolExecution           ="$(ClYieldDuringToolExecution)"
    >
        <Output TaskParameter="ResolvedPathToTool"  PropertyName="_VC_CL_ResolvedPathToTool" />
    </CL>

    <!-- Rest of the sources -->
    <MultiToolTask Condition="'%(ClCompile._MultiProcessorCompilation)' == 'true' and '%(ClCompile.PrecompiledHeader)' != 'Create' and '%(ClCompile.ExcludedFromBuild)'!='true' and '%(ClCompile.CompilerIteration)' == '' and @(ClCompile) != ''"
                  TaskName="Microsoft.Build.CPPTasks.CL"
                  TaskAssemblyName="$(VCTargetsPath)Microsoft.Build.CppTasks.Common.dll"
                  Sources="@(ClCompile)"

                  MaxProcessCount="$(MultiProcMaxCount)"
                  EnforceProcessCountAcrossBuilds="$(EnforceProcessCountAcrossBuilds)"
                  TrackFileAccess="$(TrackFileAccess)"
                  TrackedOutputFilesToIgnore ="@(ClTrackedOutputFilesToIgnore)"
                  TrackerLogDirectory="$(TLogLocation)"
                  MinimalRebuildFromTracking="$(ClMutliToolTaskMinimalRebuild)"
                  TLogReadFiles="@(CLTLogReadFiles)"
                  TLogWriteFiles="@(CLTLogWriteFiles)"
                  ToolExe="$(CLToolExe)"
                  ToolPath="$(CLToolPath)"
                  ToolArchitecture="$(CLToolArchitecture)"
                  TrackerFrameworkPath="$(CLTrackerFrameworkPath)"
                  TrackerSdkPath="$(CLTrackerSdkPath)"
    >
      <Output TaskParameter="ResolvedPathToTool"  PropertyName="_VC_CL_ResolvedPathToTool" />
    </MultiToolTask>

    <CL Condition="'%(ClCompile._MultiProcessorCompilation)' != 'true' and '%(ClCompile.PrecompiledHeader)' != 'Create' and '%(ClCompile.ExcludedFromBuild)'!='true' and '%(ClCompile.CompilerIteration)' == '' and @(ClCompile) != ''"
        BuildingInIDE                      ="$(BuildingInsideVisualStudio)"
        Sources                            ="@(ClCompile)"

        AdditionalIncludeDirectories       ="%(ClCompile.AdditionalIncludeDirectories)"
        AdditionalOptions                  ="%(ClCompile.AdditionalOptions)"
        AdditionalUsingDirectories         ="%(ClCompile.AdditionalUsingDirectories)"
        AssemblerListingLocation           ="%(ClCompile.AssemblerListingLocation)"
        AssemblerOutput                    ="%(ClCompile.AssemblerOutput)"
        BrowseInformation                  ="%(ClCompile.BrowseInformation)"
        BrowseInformationFile              ="%(ClCompile.BrowseInformationFile)"
        BufferSecurityCheck                ="%(ClCompile.BufferSecurityCheck)"
        CallingConvention                  ="%(ClCompile.CallingConvention)"
        ControlFlowGuard                   ="%(ClCompile.ControlFlowGuard)"
        CompileAsManaged                   ="%(ClCompile.CompileAsManaged)"
        CompileAsWinRT                     ="%(ClCompile.CompileAsWinRT)"
        CompileAs                          ="%(ClCompile.CompileAs)"
        ConformanceMode                    ="%(ClCompile.ConformanceMode)"
        DebugInformationFormat             ="%(ClCompile.DebugInformationFormat)"
        DiagnosticsFormat                  ="%(ClCompile.DiagnosticsFormat)"
        DisableLanguageExtensions          ="%(ClCompile.DisableLanguageExtensions)"
        DisableSpecificWarnings            ="%(ClCompile.DisableSpecificWarnings)"
        EnableEnhancedInstructionSet       ="%(ClCompile.EnableEnhancedInstructionSet)"
        EnableFiberSafeOptimizations       ="%(ClCompile.EnableFiberSafeOptimizations)"
        EnableModules                      ="%(ClCompile.EnableModules)"
        EnableParallelCodeGeneration       ="%(ClCompile.EnableParallelCodeGeneration)"
        EnablePREfast                      ="%(ClCompile.EnablePREfast)"
        EnforceTypeConversionRules         ="%(ClCompile.EnforceTypeConversionRules)"
        ErrorReporting                     ="%(ClCompile.ErrorReporting)"
        ExceptionHandling                  ="%(ClCompile.ExceptionHandling)"
        ExpandAttributedSource             ="%(ClCompile.ExpandAttributedSource)"
        FavorSizeOrSpeed                   ="%(ClCompile.FavorSizeOrSpeed)"
        FloatingPointExceptions            ="%(ClCompile.FloatingPointExceptions)"
        FloatingPointModel                 ="%(ClCompile.FloatingPointModel)"
        ForceConformanceInForLoopScope     ="%(ClCompile.ForceConformanceInForLoopScope)"
        ForcedIncludeFiles                 ="%(ClCompile.ForcedIncludeFiles)"
        ForcedUsingFiles                   ="%(ClCompile.ForcedUsingFiles)"
        FunctionLevelLinking               ="%(ClCompile.FunctionLevelLinking)"
        GenerateXMLDocumentationFiles      ="%(ClCompile.GenerateXMLDocumentationFiles)"
        IgnoreStandardIncludePath          ="%(ClCompile.IgnoreStandardIncludePath)"
        InlineFunctionExpansion            ="%(ClCompile.InlineFunctionExpansion)"
        IntrinsicFunctions                 ="%(ClCompile.IntrinsicFunctions)"
        LanguageStandard                   ="%(ClCompile.LanguageStandard)"
        MinimalRebuild                     ="%(ClCompile.MinimalRebuild)"
        MultiProcessorCompilation          ="%(ClCompile.MultiProcessorCompilation)"
        ObjectFileName                     ="%(ClCompile.ObjectFileName)"
        OmitDefaultLibName                 ="%(ClCompile.OmitDefaultLibName)"
        OmitFramePointers                  ="%(ClCompile.OmitFramePointers)"
        OpenMPSupport                      ="%(ClCompile.OpenMPSupport)"
        Optimization                       ="%(ClCompile.Optimization)"
        PrecompiledHeader                  ="%(ClCompile.PrecompiledHeader)"
        PrecompiledHeaderFile              ="%(ClCompile.PrecompiledHeaderFile)"
        PrecompiledHeaderOutputFile        ="%(ClCompile.PrecompiledHeaderOutputFile)"
        PREfastAdditionalOptions           ="%(ClCompile.PREfastAdditionalOptions)"
        PREfastAdditionalPlugins           ="%(ClCompile.PREfastAdditionalPlugins)"
        PREfastLog                         ="%(ClCompile.PREfastLog)"
        PreprocessKeepComments             ="%(ClCompile.PreprocessKeepComments)"
        PreprocessorDefinitions            ="%(ClCompile.PreprocessorDefinitions)"
        PreprocessSuppressLineNumbers      ="%(ClCompile.PreprocessSuppressLineNumbers)"
        PreprocessToFile                   ="%(ClCompile.PreprocessToFile)"
        ProcessorNumber                    ="%(ClCompile.ProcessorNumber)"
        ProgramDataBaseFileName            ="%(ClCompile.ProgramDataBaseFileName)"
        RemoveUnreferencedCodeData         ="%(ClCompile.RemoveUnreferencedCodeData)"
        RuntimeLibrary                     ="%(ClCompile.RuntimeLibrary)"
        RuntimeTypeInfo                    ="%(ClCompile.RuntimeTypeInfo)"
        SDLCheck                           ="%(ClCompile.SDLCheck)"
        ShowIncludes                       ="%(ClCompile.ShowIncludes)"
        WarningVersion                     ="%(ClCompile.WarningVersion)"
        SmallerTypeCheck                   ="%(ClCompile.SmallerTypeCheck)"
        SpectreMitigation                  ="%(ClCompile.SpectreMitigation)"
        StringPooling                      ="%(ClCompile.StringPooling)"
        StructMemberAlignment              ="%(ClCompile.StructMemberAlignment)"
        SupportJustMyCode                  ="%(ClCompile.SupportJustMyCode)"
        SuppressStartupBanner              ="%(ClCompile.SuppressStartupBanner)"
        TreatSpecificWarningsAsErrors      ="%(ClCompile.TreatSpecificWarningsAsErrors)"
        TreatWarningAsError                ="%(ClCompile.TreatWarningAsError)"
        TreatWChar_tAsBuiltInType          ="%(ClCompile.TreatWChar_tAsBuiltInType)"
        UndefineAllPreprocessorDefinitions ="%(ClCompile.UndefineAllPreprocessorDefinitions)"
        UndefinePreprocessorDefinitions    ="%(ClCompile.UndefinePreprocessorDefinitions)"
        UseFullPaths                       ="%(ClCompile.UseFullPaths)"
        UseUnicodeForAssemblerListing      ="%(ClCompile.UseUnicodeForAssemblerListing)"
        WarningLevel                       ="%(ClCompile.WarningLevel)"
        WholeProgramOptimization           ="%(ClCompile.WholeProgramOptimization)"
        WinRTNoStdLib                      ="%(ClCompile.WinRTNoStdLib)"
        XMLDocumentationFileName           ="%(ClCompile.XMLDocumentationFileName)"
        CreateHotpatchableImage            ="%(CLCompile.CreateHotpatchableImage)"

        TrackerLogDirectory                ="%(ClCompile.TrackerLogDirectory)"
        ExcludedInputPaths                 ="%(ClCompile.ExcludedInputPaths)"
        TLogReadFiles                      ="@(CLTLogReadFiles)"
        TLogWriteFiles                     ="@(CLTLogWriteFiles)"
        ToolExe                            ="$(CLToolExe)"
        ToolPath                           ="$(CLToolPath)"
        TrackFileAccess                    ="$(TrackFileAccess)"
        MinimalRebuildFromTracking         ="%(ClCompile.MinimalRebuildFromTracking)"
        ToolArchitecture                   ="$(CLToolArchitecture)"
        TrackerFrameworkPath               ="$(CLTrackerFrameworkPath)"
        TrackerSdkPath                     ="$(CLTrackerSdkPath)"
        TrackedInputFilesToIgnore          ="@(ClNoDependencies)"
        TrackedOutputFilesToIgnore         ="@(ClTrackedOutputFilesToIgnore)"
        DeleteOutputOnExecute              ="$(CLDeleteOutputOnExecute)"
        AcceptableNonZeroExitCodes         ="%(ClCompile.AcceptableNonZeroExitCodes)"
        YieldDuringToolExecution           ="$(ClYieldDuringToolExecution)"
    >
      <Output TaskParameter="ResolvedPathToTool"  PropertyName="_VC_CL_ResolvedPathToTool" />
    </CL>

    <OnError ExecuteTargets="ClangClNotFoundError" />
    <OnError Condition="'$(OnXamlPreCompileErrorTarget)' != ''" ExecuteTargets="$(OnXamlPreCompileErrorTarget)" />
  </Target>

  <Target Name="ClangClNotFoundError">
    <VCMessage Code="MSB8057" Type="Error"  Condition="'$(_ExecutablePathWasCustomized)'=='false' AND '$(_VC_CL_ResolvedPathToTool)'=='$(CLToolExe)'" />
  </Target>

  <Target Name="Link"
          Condition="'@(Link)' != ''"
          DependsOnTargets="ComputeLinkSwitches">
    <ItemGroup>
      <MSFSLinkTask>
        <ProfileGuidedDatabase Condition="'%(Link.LinkTimeCodeGeneration)' != 'PGOptimization' and
                                          '%(Link.LinkTimeCodeGeneration)' != 'PGUpdate' and
                                          '%(Link.LinkTimeCodeGeneration)' != 'PGInstrument'"></ProfileGuidedDatabase>
        <ManifestEmbed Condition="'%(Link.ManifestEmbed)' == '' and '$(LegacyManifestEmbedding)' != 'true'">$(EmbedManifest)</ManifestEmbed>
        <ManifestInput Condition="'$(LegacyManifestEmbedding)' != 'true' and '$(EmbedManifest)' == 'true'">@(Link->'%(ManifestInput)');@(Manifest);$(ManifestAdditionalManifestFiles)</ManifestInput>
        <ManifestFile Condition="'$(LegacyManifestEmbedding)' != 'true'" />
      </MSFSLinkTask>

      <!-- Remove some Winmd switches if generation is false -->
      <MSFSLinkTask>
        <WindowsMetadataFile            Condition="'%(Link.GenerateWindowsMetadata)' == ''" />
        <WindowsMetadataLinkKeyFile     Condition="'%(Link.GenerateWindowsMetadata)' == ''" />
        <WindowsMetadataKeyContainer    Condition="'%(Link.GenerateWindowsMetadata)' == ''" />
        <WindowsMetadataLinkDelaySign   Condition="'%(Link.GenerateWindowsMetadata)' == ''" />
        <WindowsMetadataSignHash        Condition="'%(Link.GenerateWindowsMetadata)' == ''" />
      </MSFSLinkTask>

      <!-- Settings needed for lld-link.exe  -->
      <MSFSLinkTask>
        <GenerateDebugInformation>DebugFull</GenerateDebugInformation>
      </MSFSLinkTask>
    </ItemGroup>

    <PropertyGroup>
	  <ActualOutputPath Condition="('$(EaCPatchOutDir)' == '') OR  ('$(IsEaCPatch)' == false)">%(Link.OutputFile)</ActualOutputPath>
      <ActualOutputPath Condition="('$(EaCPatchOutDir)' != '') AND ('$(IsEaCPatch)' == true)">$(EaCPatchOutDir)/$([System.IO.Path]::GetFileName('%(Link.OutputFile)'))</ActualOutputPath>
    </PropertyGroup>

	<!-- output the final wasm file full path to a bookkeeping file -->
	<Exec Condition="('$(EaCPatchOutDir)' != '') AND ('$(IsEaCPatch)' == true)" Command="echo $([System.IO.Path]::GetFullPath($(ActualOutputPath)))> &quot;$(EaCPatchOutDir)/__wasm_module_path.txt&quot;"/>

    <MSFSLinkTask
        BuildingInIDE                  ="$(BuildingInsideVisualStudio)"
        Sources                        ="@(Link)"
		
        AdditionalDependencies         ="%(Link.AdditionalDependencies)"
        AdditionalLibraryDirectories   ="%(Link.AdditionalLibraryDirectories)"
        AdditionalOptions              ="%(Link.AdditionalOptions)"
		EntryPointSymbol               ="%(Link.EntryPointSymbol)"
        IgnoreAllDefaultLibraries      ="%(Link.IgnoreAllDefaultLibraries)"
        IgnoreSpecificDefaultLibraries ="%(Link.IgnoreSpecificDefaultLibraries)"
        OutputFile                     ="$(ActualOutputPath)"
        NoEntryPoint                   ="%(Link.NoEntryPoint)"
        ToolExe                        ="$(LinkToolExe)"

    >
    </MSFSLinkTask>
      <Message Text="$(ActualOutputPath)"/> 
    <Message Text="$(MSBuildProjectFile) -&gt; $(TargetPath)" Importance="High" Condition="'$(EmbedManifestBy)' != 'LINK' or '$(LegacyManifestEmbedding)' != 'true' or '$(LinkSkippedExecution)' == 'true'"/>
    <VCMessage Code="MSB8033" Type="Message" Arguments="$(MSBuildProjectFile);%(Link.ProgramDatabaseFile)" Importance="High"
             Condition="('$(EmbedManifestBy)' != 'LINK' or '$(LegacyManifestEmbedding)' != 'true' or '$(LinkSkippedExecution)' == 'true') and
             %(Link.GenerateDebugInformation) == 'DebugFastLink' and %(Link.ProgramDataBaseFileName) != ''"/>
    <VCMessage Code="MSB8034" Type="Message" Arguments="$(MSBuildProjectFile);%(Link.ProgramDatabaseFile)" Importance="High"
             Condition="('$(EmbedManifestBy)' != 'LINK' or '$(LegacyManifestEmbedding)' != 'true' or '$(LinkSkippedExecution)' == 'true') and
             %(Link.GenerateDebugInformation) == 'true' and %(Link.ProgramDataBaseFileName) != ''"/>

    <OnError ExecuteTargets="LLDNotFoundError" />
  </Target>

  <Target Name="Lib"
          Condition="'@(Lib)' != ''"
          DependsOnTargets="ComputeLinkSwitches">
    <ItemGroup>
      <MSFSLibTask>
        <ProfileGuidedDatabase Condition="'%(Link.LinkTimeCodeGeneration)' != 'PGOptimization' and
                                          '%(Link.LinkTimeCodeGeneration)' != 'PGUpdate' and
                                          '%(Link.LinkTimeCodeGeneration)' != 'PGInstrument'"></ProfileGuidedDatabase>
        <ManifestEmbed Condition="'%(Link.ManifestEmbed)' == '' and '$(LegacyManifestEmbedding)' != 'true'">$(EmbedManifest)</ManifestEmbed>
        <ManifestInput Condition="'$(LegacyManifestEmbedding)' != 'true' and '$(EmbedManifest)' == 'true'">@(Link->'%(ManifestInput)');@(Manifest);$(ManifestAdditionalManifestFiles)</ManifestInput>
        <ManifestFile Condition="'$(LegacyManifestEmbedding)' != 'true'" />
      </MSFSLibTask>

      <!-- Remove some Winmd switches if generation is false -->
      <MSFSLibTask>
        <WindowsMetadataFile            Condition="'%(Link.GenerateWindowsMetadata)' == ''" />
        <WindowsMetadataLinkKeyFile     Condition="'%(Link.GenerateWindowsMetadata)' == ''" />
        <WindowsMetadataKeyContainer    Condition="'%(Link.GenerateWindowsMetadata)' == ''" />
        <WindowsMetadataLinkDelaySign   Condition="'%(Link.GenerateWindowsMetadata)' == ''" />
        <WindowsMetadataSignHash        Condition="'%(Link.GenerateWindowsMetadata)' == ''" />
      </MSFSLibTask>

      <!-- Settings needed for lld-link.exe  -->
      <MSFSLibTask>
        <GenerateDebugInformation>DebugFull</GenerateDebugInformation>
      </MSFSLibTask>
    </ItemGroup>

    <MSFSLibTask
        Sources                        ="@(Lib)"
        BuildingInIDE                  ="$(BuildingInsideVisualStudio)"
        OutputFile                     ="%(Lib.OutputFile)"
        ToolExe                        ="$(LibToolExe)"

    >
      
    </MSFSLibTask>

    <Message Text="$(MSBuildProjectFile) -&gt; $(TargetPath)" Importance="High" Condition="'$(EmbedManifestBy)' != 'LINK' or '$(LegacyManifestEmbedding)' != 'true' or '$(LinkSkippedExecution)' == 'true'"/>
    <VCMessage Code="MSB8033" Type="Message" Arguments="$(MSBuildProjectFile);%(Link.ProgramDatabaseFile)" Importance="High"
             Condition="('$(EmbedManifestBy)' != 'LINK' or '$(LegacyManifestEmbedding)' != 'true' or '$(LinkSkippedExecution)' == 'true') and
             %(Link.GenerateDebugInformation) == 'DebugFastLink' and %(Link.ProgramDataBaseFileName) != ''"/>
    <VCMessage Code="MSB8034" Type="Message" Arguments="$(MSBuildProjectFile);%(Link.ProgramDatabaseFile)" Importance="High"
             Condition="('$(EmbedManifestBy)' != 'LINK' or '$(LegacyManifestEmbedding)' != 'true' or '$(LinkSkippedExecution)' == 'true') and
             %(Link.GenerateDebugInformation) == 'true' and %(Link.ProgramDataBaseFileName) != ''"/>

    <OnError ExecuteTargets="LLDNotFoundError" />
  </Target>

  <Target Name="LLDNotFoundError">
    <VCMessage Code="MSB8057" Type="Error"  Condition="'$(_ExecutablePathWasCustomized)' == 'false' AND '$(_VC_Link_ResolvedPathToTool)' == '$(LinkToolExe)'" />
  </Target>
</Project>
